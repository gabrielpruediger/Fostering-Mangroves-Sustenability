// Define Study Field (Region of Interest)
var geometry = ee.Geometry({
'type': 'Polygon',
'coordinates':
[[[-43.550, -23.000],
[-43.650, -23.000],
[-43.650, -23.050],
[-43.550, -23.050]]]
});
var geometryCoordinates = geometry.coordinates();
print('geometry.coordinates(...) =', geometryCoordinates);
Map.setCenter(-43.650, -23.000, 15);
Map.addLayer(geometry,
{'color': 'black'},
'Geometry [black]: geometry');
// Script to estimate Above-Ground Biomass (AGB) using
// a Random Forest Regression model with
// GEDI L4A Raster Aboveground Biomass Density observations.
// https://spatialthoughts.com/2024/02/07/agb-regression-gee
// ****************************************************
// ****************************************************
// Part-1: Preprocessing and Data Preperation
// ****************************************************
// Select a region - Guaratiba Bay
// ****************************************************
// Delete the 'geometry' import and draw a polygon
// for your region of interest
Map.centerObject(geometry);
// Select the datasets
// ****************************************************
// GEDI L4A Raster Aboveground Biomass Density
// These are point observations that will be used as ground-truth
// and the predicted variable in the regression model
var gedi = ee.ImageCollection('LARSE/GEDI/GEDI04_A_002_MONTHLY');
// We will use Sentinel-2 bands, derived indices and elevation
// as predictors for the regresison model
// Sentinel-2 Surface Reflectance
var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED');
// Copernicus GLO-30 DEM
var glo30 = ee.ImageCollection('COPERNICUS/DEM/GLO30');
// Select a time-period
// ****************************************************
var startDate = ee.Date.fromYMD(2022, 1, 1);
var endDate = startDate.advance(1, 'year');
// Preparing Sentinel-2 composite
// ****************************************************
var filteredS2 = s2
.filter(ee.Filter.date(startDate, endDate))
.filter(ee.Filter.bounds(geometry))
// Extract the projection before any processing
var s2Projection = ee.Image(filteredS2.first()).select('B4')
.projection();
// Function to apply scale factor to convert
// pixel values to reflectances
var scaleBands = function(image) {
return image.multiply(0.0001)
.copyProperties(image, ['system:time_start']);
};
// Use Cloud Score+ cloud mask
var csPlus = ee.ImageCollection(
'GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();
// Function to mask pixels with low CS+ QA scores.
function maskLowQA(image) {
var qaBand = 'cs';
var clearThreshold = 0.5;
var mask = image.select(qaBand).gte(clearThreshold);
return image.updateMask(mask);
}
// Function to compute spectral indices
var addIndices = function(image) {
var ndvi = image.normalizedDifference(['B8', 'B4'])
.rename('ndvi');
var mndwi = image.normalizedDifference(['B3', 'B11'])
.rename('mndwi');
var ndbi = image.normalizedDifference(['B11', 'B8'])
.rename('ndbi');
var evi = image.expression(
'2.5 * ((NIR - RED)/(NIR + 6*RED - 7.5*BLUE + 1))', {
'NIR': image.select('B8'),
'RED': image.select('B4'),
'BLUE': image.select('B2')
}).rename('evi');
var bsi = image.expression(
'(( X + Y ) - (A + B)) /(( X + Y ) + (A + B)) ', {
'X': image.select('B11'),
'Y': image.select('B4'),
'A': image.select('B8'),
'B': image.select('B2'),
}).rename('bsi');
return image
.addBands(ndvi)
.addBands(mndwi)
.addBands(ndbi)
.addBands(evi)
.addBands(bsi);
};
// We need to add Cloud Score + bands to each Sentinel-2
// image in the collection
// This is done using the linkCollection() function
var filteredS2WithCs = filteredS2.linkCollection(
csPlus, csPlusBands);
// Apply all the pre-processing steps
// Order in which the functions are applied is important
var s2Processed = filteredS2WithCs
.map(maskLowQA)
.select('B.*')
.map(scaleBands)
.map(addIndices);
// Create the S2 composite
var s2Composite = s2Processed.median()
.setDefaultProjection(s2Projection);
//Preparing GLO-30 slope and elevation
// ****************************************************
var glo30Filtered = glo30
.filter(ee.Filter.bounds(geometry))
.select('DEM');
// Extract the projection
var demProj = glo30Filtered.first().select(0).projection();
// The dataset consists of individual images
// Create a mosaic and set the projection
var elevation = glo30Filtered.mosaic().rename('dem')
.setDefaultProjection(demProj);
// Compute the slope
var slope = ee.Terrain.slope(elevation);
// Create an image with slope and elevation bands
var demBands = elevation.addBands(slope);
// Preparing GEDI L4A Mosaic
// ****************************************************
// Function to select highest quality GEDI data
var qualityMask = function(image) {
return image.updateMask(image.select('l4_quality_flag').eq(1))
.updateMask(image.select('degrade_flag').eq(0));
};
// Function to mask unreliable GEDI measurements
// with a relative standard error > 50%
// agbd_se / agbd > 0.5
var errorMask = function(image) {
var relative_se = image.select('agbd_se')
.divide(image.select('agbd'));
return image.updateMask(relative_se.lte(0.5));
};
// Function to mask GEDI measurements on slopes > 30%
var slopeMask = function(image) {
return image.updateMask(slope.lt(30));
};
var gediFiltered = gedi
.filter(ee.Filter.date(startDate, endDate))
.filter(ee.Filter.bounds(geometry));
var gediProjection = ee.Image(gediFiltered.first())
.select('agbd').projection();
var gediProcessed = gediFiltered
.map(qualityMask)
.map(errorMask)
.map(slopeMask);
var gediMosaic = gediProcessed.mosaic()
.select('agbd').setDefaultProjection(gediProjection);
// Visualize the composites
var rgbVis = {
min: 0.0, max: 0.3, gamma: 1.2,
bands: ['B4', 'B3', 'B2'],
};
Map.addLayer(
s2Composite.clip(geometry), rgbVis, 'Sentinel-2 Composite');
Map.addLayer(elevation.clip(geometry),
{min:0, max: 1000}, 'Elevation', false);
Map.addLayer(slope.clip(geometry),
{min: 0, max: 45}, 'Slope', false);
var gediVis = {
min: 0,
max: 200,
palette: ['#edf8fb','#b2e2e2','#66c2a4','#2ca25f','#006d2c'],
bands: ['agbd']
};
Map.addLayer(gediFiltered.mosaic().clip(geometry),
gediVis, 'GEDI L4A (Raw)', false);
Map.addLayer(gediMosaic.clip(geometry),
gediVis, 'GEDI L4A (Filtered)');
// Script to estimate Above-Ground Biomass (AGB) using
// a Random Forest Regression model with
// GEDI L4A Raster Aboveground Biomass Density observations.
// https://spatialthoughts.com/2024/02/07/agb-regression-gee
// ****************************************************
// ****************************************************
// Part-2: Building a Regression Model
// ****************************************************
// Resample to a Grid
// ****************************************************
// GEDI measurements have horizontal accuracy of +/- 9 m
// This is problematic when matching the GEDI AGB values
// to Sentinel-2 pixels.
// To overcome this, we resample and aggregate all input
// images to a larger pixel-grid.
// Choose the grid size and projection
var gridScale = 100;
var gridProjection = ee.Projection('EPSG:4238')
.atScale(gridScale);
// Create a stacked image
// We assemble a composite with all the bands
var stacked = s2Composite
.addBands(demBands)
.addBands(gediMosaic);
// Set the resampling mode
var stacked = stacked.resample('bilinear');
// Aggregate pixels with 'mean' statistics
var stackedResampled = stacked
.reduceResolution({
reducer: ee.Reducer.mean(),
maxPixels: 1024
})
.reproject({
crs: gridProjection
});
// As larger GEDI pixels contain masked original
// pixels, it has a transparency mask.
// We update the mask to remove the transparency
var stackedResampled = stackedResampled
.updateMask(stackedResampled.mask().gt(0));
// Visualize the resampled layers
// Note: Resampling is an expensive operation
// If you see tile or computation errors, it will
// help you export the resampled image as Asset first.
Map.addLayer(
stackedResampled, rgbVis, 'Sentinel-2 (Resampled)');
Map.addLayer(
stackedResampled, gediVis, 'GEDI L4A (Resampled)');
// Extract Training Features
// ****************************************************
var predictors = s2Composite.bandNames().cat(demBands.bandNames());
var predicted = gediMosaic.bandNames().get(0);
print('predictors', predictors);
print('predicted', predicted);
var predictorImage = stackedResampled.select(predictors);
var predictedImage = stackedResampled.select([predicted]);
// Our GEDI image is mostly masked and contain values
// at only a small subset of pixels
// If we used sample() it will return mostly empty values
// To overcome this, we create a class-band from the GEDI
// mask and use stratifiedSampling() to ensure we sample from
// the non-masked areas.
var classMask = predictedImage.mask().toInt().rename('class');
var numSamples = 1000;
// We set classPoints to [0, numSamples]
// This will give us 0 points for class 0 (masked areas)
// and numSample points for class 1 (non-masked areas)
var training = stackedResampled.addBands(classMask)
.stratifiedSample({
numPoints: numSamples,
classBand: 'class',
region: geometry,
scale: gridScale,
classValues: [0, 1],
classPoints: [0, numSamples],
dropNulls: true,
tileScale: 16,
});
print('Number of Features Extracted', training.size());
print('Sample Training Feature', training.first());
// Train a Regression Model
// ****************************************************
// Use the RandomForest classifier and set the
// output mode to REGRESSION
var model = ee.Classifier.smileRandomForest(50)
.setOutputMode('REGRESSION')
.train({
features: training,
classProperty: predicted,
inputProperties: predictors
});
// Get model's predictions for training samples
var predicted = training.classify({
classifier: model,
outputName: 'agbd_predicted'
});
// Calculate RMSE
var calculateRmse = function(input) {
var observed = ee.Array(
input.aggregate_array('agbd'));
var predicted = ee.Array(
input.aggregate_array('agbd_predicted'));
var rmse = observed.subtract(predicted).pow(2)
.reduce('mean', [0]).sqrt().get([0]);
return rmse;
};
var rmse = calculateRmse(predicted);
print('RMSE', rmse)
// Create a plot of observed vs. predicted values
var chart = ui.Chart.feature.byFeature({
features: predicted.select(['agbd', 'agbd_predicted']),
xProperty: 'agbd',
yProperties: ['agbd_predicted'],
}).setChartType('ScatterChart')
.setOptions({
title: 'Aboveground Biomass Density (Mg/Ha)',
dataOpacity: 0.8,
hAxis: {'title': 'Observed'},
vAxis: {'title': 'Predicted'},
legend: {position: 'right'},
series: {
0: {
visibleInLegend: false,
color: '#525252',
pointSize: 3,
pointShape: 'triangle',
},
},
trendlines: {
0: {
type: 'linear',
color: 'black',
lineWidth: 1,
pointSize: 0,
labelInLegend: 'Linear Fit',
visibleInLegend: true,
showR2: true
}
},
chartArea: {left: 100, bottom:100, width:'50%'},
});
print(chart);
// Generate Predictions for Unknown Values
// ****************************************************
// Once the model is trained, we can use .classify()
// to run the model against all pixels of the image
// We set the band name of the output image as 'agbd'
var predictedImage = stackedResampled.classify({
classifier: model,
outputName: 'agbd'
});
// Mask Non-Vegetation Areas
// ****************************************************
// GEDI data is processed only for certain landcovers
// from Plant Functional Types (PFT) classification
// https://doi.org/10.1029/2022EA002516
// Here we use ESA WorldCover v200 product to
// select landcovers representing vegetated areas
var worldcover = ee.ImageCollection('ESA/WorldCover/v200').first();
// Aggregate pixels to the same grid as other dataset
// with 'mode' value.
// i.e. The landcover with highest occurrence within the grid
var worldcoverResampled = worldcover
.reduceResolution({
reducer: ee.Reducer.mode(),
maxPixels: 1024
})
.reproject({
crs: gridProjection
});
// Select grids for the following classes
// | Class Name | Value |
// | Forests | 10 |
// | Shrubland | 20 |
// | Grassland | 30 |
// | Cropland | 40 |
// | Mangroves | 95 |
var landCoverMask = worldcoverResampled.eq(10)
.or(worldcoverResampled.eq(20))
.or(worldcoverResampled.eq(30))
.or(worldcoverResampled.eq(40))
.or(worldcoverResampled.eq(95));
var predictedImageMasked = predictedImage
.updateMask(landCoverMask);
Map.addLayer(predictedImageMasked,
gediVis, 'Predicted AGBD (Masked)');
// Calculate Total AGB
// ****************************************************
// The units of GEDI AGBD values is Megagrams/Hectares
// To get the Total AGB, we multiply each pixel with its
// area in Hectares
var pixelAreaHa = ee.Image.pixelArea().divide(10000);
var predictedAgb = predictedImageMasked.multiply(pixelAreaHa);
var stats = predictedAgb.reduceRegion({
reducer: ee.Reducer.sum(),
geometry: geometry,
scale: gridScale,
maxPixels: 1e10,
tileScale: 16
});
// Result is a dictionary with key for each band
var totalAgb = stats.getNumber('agbd');
print('Total AGB (Mg)', totalAgb);
var image_map = {
"bands":["B8","B4", "B3"],
"min": 600,
"max": 3000,
"gamma": 1,
};
Map.addLayer(s2,image_map,'Image')
